// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf_pmtd_msgs/pmtd_common_msgs.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protobuf_pmtd_msgs/pmtd_common_msgs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PmtdMsg {

namespace {

const ::google::protobuf::Descriptor* Header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_reflection_ = NULL;
const ::google::protobuf::Descriptor* PmtdCommonMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PmtdCommonMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceStatusMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceStatusMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PmtdDeviceStatusMsgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PmtdDeviceStatusMsgs_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PmtdDeviceTypeE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PmtdStatusTypeE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_protobuf_5fpmtd_5fmsgs_2fpmtd_5fcommon_5fmsgs_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_protobuf_5fpmtd_5fmsgs_2fpmtd_5fcommon_5fmsgs_2eproto() {
  protobuf_AddDesc_protobuf_5fpmtd_5fmsgs_2fpmtd_5fcommon_5fmsgs_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protobuf_pmtd_msgs/pmtd_common_msgs.proto");
  GOOGLE_CHECK(file != NULL);
  Header_descriptor_ = file->message_type(0);
  static const int Header_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, device_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, timestamp_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, message_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, verify_code_),
  };
  Header_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Header_descriptor_,
      Header::default_instance_,
      Header_offsets_,
      -1,
      -1,
      -1,
      sizeof(Header),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _is_default_instance_));
  PmtdCommonMsg_descriptor_ = file->message_type(1);
  static const int PmtdCommonMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PmtdCommonMsg, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PmtdCommonMsg, command_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PmtdCommonMsg, body_),
  };
  PmtdCommonMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PmtdCommonMsg_descriptor_,
      PmtdCommonMsg::default_instance_,
      PmtdCommonMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(PmtdCommonMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PmtdCommonMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PmtdCommonMsg, _is_default_instance_));
  DeviceStatusMsg_descriptor_ = file->message_type(2);
  static const int DeviceStatusMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceStatusMsg, device_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceStatusMsg, device_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceStatusMsg, device_error_code_),
  };
  DeviceStatusMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeviceStatusMsg_descriptor_,
      DeviceStatusMsg::default_instance_,
      DeviceStatusMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeviceStatusMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceStatusMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceStatusMsg, _is_default_instance_));
  PmtdDeviceStatusMsgs_descriptor_ = file->message_type(3);
  static const int PmtdDeviceStatusMsgs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PmtdDeviceStatusMsgs, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PmtdDeviceStatusMsgs, status_msgs_),
  };
  PmtdDeviceStatusMsgs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PmtdDeviceStatusMsgs_descriptor_,
      PmtdDeviceStatusMsgs::default_instance_,
      PmtdDeviceStatusMsgs_offsets_,
      -1,
      -1,
      -1,
      sizeof(PmtdDeviceStatusMsgs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PmtdDeviceStatusMsgs, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PmtdDeviceStatusMsgs, _is_default_instance_));
  PmtdDeviceTypeE_descriptor_ = file->enum_type(0);
  PmtdStatusTypeE_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protobuf_5fpmtd_5fmsgs_2fpmtd_5fcommon_5fmsgs_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Header_descriptor_, &Header::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PmtdCommonMsg_descriptor_, &PmtdCommonMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeviceStatusMsg_descriptor_, &DeviceStatusMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PmtdDeviceStatusMsgs_descriptor_, &PmtdDeviceStatusMsgs::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protobuf_5fpmtd_5fmsgs_2fpmtd_5fcommon_5fmsgs_2eproto() {
  delete Header::default_instance_;
  delete Header_reflection_;
  delete PmtdCommonMsg::default_instance_;
  delete PmtdCommonMsg_reflection_;
  delete DeviceStatusMsg::default_instance_;
  delete DeviceStatusMsg_reflection_;
  delete PmtdDeviceStatusMsgs::default_instance_;
  delete PmtdDeviceStatusMsgs_reflection_;
}

void protobuf_AddDesc_protobuf_5fpmtd_5fmsgs_2fpmtd_5fcommon_5fmsgs_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_protobuf_5fpmtd_5fmsgs_2fpmtd_5fcommon_5fmsgs_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n)protobuf_pmtd_msgs/pmtd_common_msgs.pr"
    "oto\022\007PmtdMsg\"a\n\006Header\022\025\n\rdevice_number\030"
    "\001 \001(\005\022\025\n\rtimestamp_sec\030\002 \001(\001\022\024\n\014message_"
    "type\030\003 \001(\005\022\023\n\013verify_code\030\004 \001(\t\"T\n\rPmtdC"
    "ommonMsg\022\037\n\006header\030\001 \001(\0132\017.PmtdMsg.Heade"
    "r\022\024\n\014command_type\030\002 \001(\005\022\014\n\004body\030\003 \001(\014\"\214\001"
    "\n\017DeviceStatusMsg\022-\n\013device_type\030\001 \001(\0162\030"
    ".PmtdMsg.PmtdDeviceTypeE\022/\n\rdevice_statu"
    "s\030\002 \001(\0162\030.PmtdMsg.PmtdStatusTypeE\022\031\n\021dev"
    "ice_error_code\030\003 \001(\005\"f\n\024PmtdDeviceStatus"
    "Msgs\022\037\n\006header\030\001 \001(\0132\017.PmtdMsg.Header\022-\n"
    "\013status_msgs\030\002 \003(\0132\030.PmtdMsg.DeviceStatu"
    "sMsg*\225\001\n\017PmtdDeviceTypeE\022\010\n\004Pmtd\020\000\022\r\n\tCs"
    "iCamera\020\001\022\t\n\005Livox\020\002\022\007\n\003Imu\020\003\022\020\n\014FileMan"
    "nager\020\004\022\025\n\021ThirdPartyDevice1\020\005\022\025\n\021ThirdP"
    "artyDevice2\020\006\022\025\n\021ThirdPartyDevice3\020\007*f\n\017"
    "PmtdStatusTypeE\022\r\n\tDEVICE_OK\020\000\022\017\n\013DEVICE"
    "_STOP\020\001\022\020\n\014DEVICE_START\020\002\022\017\n\013DEVICE_WARN"
    "\020\003\022\020\n\014DEVICE_ERROR\020\004b\006proto3", 748);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protobuf_pmtd_msgs/pmtd_common_msgs.proto", &protobuf_RegisterTypes);
  Header::default_instance_ = new Header();
  PmtdCommonMsg::default_instance_ = new PmtdCommonMsg();
  DeviceStatusMsg::default_instance_ = new DeviceStatusMsg();
  PmtdDeviceStatusMsgs::default_instance_ = new PmtdDeviceStatusMsgs();
  Header::default_instance_->InitAsDefaultInstance();
  PmtdCommonMsg::default_instance_->InitAsDefaultInstance();
  DeviceStatusMsg::default_instance_->InitAsDefaultInstance();
  PmtdDeviceStatusMsgs::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protobuf_5fpmtd_5fmsgs_2fpmtd_5fcommon_5fmsgs_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protobuf_5fpmtd_5fmsgs_2fpmtd_5fcommon_5fmsgs_2eproto {
  StaticDescriptorInitializer_protobuf_5fpmtd_5fmsgs_2fpmtd_5fcommon_5fmsgs_2eproto() {
    protobuf_AddDesc_protobuf_5fpmtd_5fmsgs_2fpmtd_5fcommon_5fmsgs_2eproto();
  }
} static_descriptor_initializer_protobuf_5fpmtd_5fmsgs_2fpmtd_5fcommon_5fmsgs_2eproto_;
const ::google::protobuf::EnumDescriptor* PmtdDeviceTypeE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PmtdDeviceTypeE_descriptor_;
}
bool PmtdDeviceTypeE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PmtdStatusTypeE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PmtdStatusTypeE_descriptor_;
}
bool PmtdStatusTypeE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Header::kDeviceNumberFieldNumber;
const int Header::kTimestampSecFieldNumber;
const int Header::kMessageTypeFieldNumber;
const int Header::kVerifyCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Header::Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PmtdMsg.Header)
}

void Header::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Header::Header(const Header& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PmtdMsg.Header)
}

void Header::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  device_number_ = 0;
  timestamp_sec_ = 0;
  message_type_ = 0;
  verify_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:PmtdMsg.Header)
  SharedDtor();
}

void Header::SharedDtor() {
  verify_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_descriptor_;
}

const Header& Header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_5fpmtd_5fmsgs_2fpmtd_5fcommon_5fmsgs_2eproto();
  return *default_instance_;
}

Header* Header::default_instance_ = NULL;

Header* Header::New(::google::protobuf::Arena* arena) const {
  Header* n = new Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:PmtdMsg.Header)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Header, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Header*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(timestamp_sec_, message_type_);
  verify_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PmtdMsg.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 device_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &device_number_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_timestamp_sec;
        break;
      }

      // optional double timestamp_sec = 2;
      case 2: {
        if (tag == 17) {
         parse_timestamp_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_sec_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_message_type;
        break;
      }

      // optional int32 message_type = 3;
      case 3: {
        if (tag == 24) {
         parse_message_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_verify_code;
        break;
      }

      // optional string verify_code = 4;
      case 4: {
        if (tag == 34) {
         parse_verify_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verify_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->verify_code().data(), this->verify_code().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "PmtdMsg.Header.verify_code"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PmtdMsg.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PmtdMsg.Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PmtdMsg.Header)
  // optional int32 device_number = 1;
  if (this->device_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->device_number(), output);
  }

  // optional double timestamp_sec = 2;
  if (this->timestamp_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->timestamp_sec(), output);
  }

  // optional int32 message_type = 3;
  if (this->message_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->message_type(), output);
  }

  // optional string verify_code = 4;
  if (this->verify_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->verify_code().data(), this->verify_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PmtdMsg.Header.verify_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->verify_code(), output);
  }

  // @@protoc_insertion_point(serialize_end:PmtdMsg.Header)
}

::google::protobuf::uint8* Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PmtdMsg.Header)
  // optional int32 device_number = 1;
  if (this->device_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->device_number(), target);
  }

  // optional double timestamp_sec = 2;
  if (this->timestamp_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->timestamp_sec(), target);
  }

  // optional int32 message_type = 3;
  if (this->message_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->message_type(), target);
  }

  // optional string verify_code = 4;
  if (this->verify_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->verify_code().data(), this->verify_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "PmtdMsg.Header.verify_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->verify_code(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PmtdMsg.Header)
  return target;
}

int Header::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:PmtdMsg.Header)
  int total_size = 0;

  // optional int32 device_number = 1;
  if (this->device_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->device_number());
  }

  // optional double timestamp_sec = 2;
  if (this->timestamp_sec() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 message_type = 3;
  if (this->message_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->message_type());
  }

  // optional string verify_code = 4;
  if (this->verify_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->verify_code());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PmtdMsg.Header)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Header* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PmtdMsg.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PmtdMsg.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PmtdMsg.Header)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.device_number() != 0) {
    set_device_number(from.device_number());
  }
  if (from.timestamp_sec() != 0) {
    set_timestamp_sec(from.timestamp_sec());
  }
  if (from.message_type() != 0) {
    set_message_type(from.message_type());
  }
  if (from.verify_code().size() > 0) {

    verify_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verify_code_);
  }
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PmtdMsg.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PmtdMsg.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {

  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  std::swap(device_number_, other->device_number_);
  std::swap(timestamp_sec_, other->timestamp_sec_);
  std::swap(message_type_, other->message_type_);
  verify_code_.Swap(&other->verify_code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Header_descriptor_;
  metadata.reflection = Header_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Header

// optional int32 device_number = 1;
void Header::clear_device_number() {
  device_number_ = 0;
}
 ::google::protobuf::int32 Header::device_number() const {
  // @@protoc_insertion_point(field_get:PmtdMsg.Header.device_number)
  return device_number_;
}
 void Header::set_device_number(::google::protobuf::int32 value) {
  
  device_number_ = value;
  // @@protoc_insertion_point(field_set:PmtdMsg.Header.device_number)
}

// optional double timestamp_sec = 2;
void Header::clear_timestamp_sec() {
  timestamp_sec_ = 0;
}
 double Header::timestamp_sec() const {
  // @@protoc_insertion_point(field_get:PmtdMsg.Header.timestamp_sec)
  return timestamp_sec_;
}
 void Header::set_timestamp_sec(double value) {
  
  timestamp_sec_ = value;
  // @@protoc_insertion_point(field_set:PmtdMsg.Header.timestamp_sec)
}

// optional int32 message_type = 3;
void Header::clear_message_type() {
  message_type_ = 0;
}
 ::google::protobuf::int32 Header::message_type() const {
  // @@protoc_insertion_point(field_get:PmtdMsg.Header.message_type)
  return message_type_;
}
 void Header::set_message_type(::google::protobuf::int32 value) {
  
  message_type_ = value;
  // @@protoc_insertion_point(field_set:PmtdMsg.Header.message_type)
}

// optional string verify_code = 4;
void Header::clear_verify_code() {
  verify_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Header::verify_code() const {
  // @@protoc_insertion_point(field_get:PmtdMsg.Header.verify_code)
  return verify_code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Header::set_verify_code(const ::std::string& value) {
  
  verify_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PmtdMsg.Header.verify_code)
}
 void Header::set_verify_code(const char* value) {
  
  verify_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PmtdMsg.Header.verify_code)
}
 void Header::set_verify_code(const char* value, size_t size) {
  
  verify_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PmtdMsg.Header.verify_code)
}
 ::std::string* Header::mutable_verify_code() {
  
  // @@protoc_insertion_point(field_mutable:PmtdMsg.Header.verify_code)
  return verify_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Header::release_verify_code() {
  // @@protoc_insertion_point(field_release:PmtdMsg.Header.verify_code)
  
  return verify_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Header::set_allocated_verify_code(::std::string* verify_code) {
  if (verify_code != NULL) {
    
  } else {
    
  }
  verify_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verify_code);
  // @@protoc_insertion_point(field_set_allocated:PmtdMsg.Header.verify_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PmtdCommonMsg::kHeaderFieldNumber;
const int PmtdCommonMsg::kCommandTypeFieldNumber;
const int PmtdCommonMsg::kBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PmtdCommonMsg::PmtdCommonMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PmtdMsg.PmtdCommonMsg)
}

void PmtdCommonMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  header_ = const_cast< ::PmtdMsg::Header*>(&::PmtdMsg::Header::default_instance());
}

PmtdCommonMsg::PmtdCommonMsg(const PmtdCommonMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PmtdMsg.PmtdCommonMsg)
}

void PmtdCommonMsg::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  command_type_ = 0;
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PmtdCommonMsg::~PmtdCommonMsg() {
  // @@protoc_insertion_point(destructor:PmtdMsg.PmtdCommonMsg)
  SharedDtor();
}

void PmtdCommonMsg::SharedDtor() {
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete header_;
  }
}

void PmtdCommonMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PmtdCommonMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PmtdCommonMsg_descriptor_;
}

const PmtdCommonMsg& PmtdCommonMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_5fpmtd_5fmsgs_2fpmtd_5fcommon_5fmsgs_2eproto();
  return *default_instance_;
}

PmtdCommonMsg* PmtdCommonMsg::default_instance_ = NULL;

PmtdCommonMsg* PmtdCommonMsg::New(::google::protobuf::Arena* arena) const {
  PmtdCommonMsg* n = new PmtdCommonMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PmtdCommonMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:PmtdMsg.PmtdCommonMsg)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  command_type_ = 0;
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PmtdCommonMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PmtdMsg.PmtdCommonMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PmtdMsg.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_command_type;
        break;
      }

      // optional int32 command_type = 2;
      case 2: {
        if (tag == 16) {
         parse_command_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &command_type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_body;
        break;
      }

      // optional bytes body = 3;
      case 3: {
        if (tag == 26) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PmtdMsg.PmtdCommonMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PmtdMsg.PmtdCommonMsg)
  return false;
#undef DO_
}

void PmtdCommonMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PmtdMsg.PmtdCommonMsg)
  // optional .PmtdMsg.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional int32 command_type = 2;
  if (this->command_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->command_type(), output);
  }

  // optional bytes body = 3;
  if (this->body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->body(), output);
  }

  // @@protoc_insertion_point(serialize_end:PmtdMsg.PmtdCommonMsg)
}

::google::protobuf::uint8* PmtdCommonMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PmtdMsg.PmtdCommonMsg)
  // optional .PmtdMsg.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional int32 command_type = 2;
  if (this->command_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->command_type(), target);
  }

  // optional bytes body = 3;
  if (this->body().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->body(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PmtdMsg.PmtdCommonMsg)
  return target;
}

int PmtdCommonMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:PmtdMsg.PmtdCommonMsg)
  int total_size = 0;

  // optional .PmtdMsg.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional int32 command_type = 2;
  if (this->command_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->command_type());
  }

  // optional bytes body = 3;
  if (this->body().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->body());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PmtdCommonMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PmtdMsg.PmtdCommonMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PmtdCommonMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PmtdCommonMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PmtdMsg.PmtdCommonMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PmtdMsg.PmtdCommonMsg)
    MergeFrom(*source);
  }
}

void PmtdCommonMsg::MergeFrom(const PmtdCommonMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PmtdMsg.PmtdCommonMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_header()) {
    mutable_header()->::PmtdMsg::Header::MergeFrom(from.header());
  }
  if (from.command_type() != 0) {
    set_command_type(from.command_type());
  }
  if (from.body().size() > 0) {

    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
}

void PmtdCommonMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PmtdMsg.PmtdCommonMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PmtdCommonMsg::CopyFrom(const PmtdCommonMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PmtdMsg.PmtdCommonMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PmtdCommonMsg::IsInitialized() const {

  return true;
}

void PmtdCommonMsg::Swap(PmtdCommonMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PmtdCommonMsg::InternalSwap(PmtdCommonMsg* other) {
  std::swap(header_, other->header_);
  std::swap(command_type_, other->command_type_);
  body_.Swap(&other->body_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PmtdCommonMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PmtdCommonMsg_descriptor_;
  metadata.reflection = PmtdCommonMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PmtdCommonMsg

// optional .PmtdMsg.Header header = 1;
bool PmtdCommonMsg::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
void PmtdCommonMsg::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::PmtdMsg::Header& PmtdCommonMsg::header() const {
  // @@protoc_insertion_point(field_get:PmtdMsg.PmtdCommonMsg.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::PmtdMsg::Header* PmtdCommonMsg::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::PmtdMsg::Header;
  }
  // @@protoc_insertion_point(field_mutable:PmtdMsg.PmtdCommonMsg.header)
  return header_;
}
::PmtdMsg::Header* PmtdCommonMsg::release_header() {
  // @@protoc_insertion_point(field_release:PmtdMsg.PmtdCommonMsg.header)
  
  ::PmtdMsg::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void PmtdCommonMsg::set_allocated_header(::PmtdMsg::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:PmtdMsg.PmtdCommonMsg.header)
}

// optional int32 command_type = 2;
void PmtdCommonMsg::clear_command_type() {
  command_type_ = 0;
}
 ::google::protobuf::int32 PmtdCommonMsg::command_type() const {
  // @@protoc_insertion_point(field_get:PmtdMsg.PmtdCommonMsg.command_type)
  return command_type_;
}
 void PmtdCommonMsg::set_command_type(::google::protobuf::int32 value) {
  
  command_type_ = value;
  // @@protoc_insertion_point(field_set:PmtdMsg.PmtdCommonMsg.command_type)
}

// optional bytes body = 3;
void PmtdCommonMsg::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PmtdCommonMsg::body() const {
  // @@protoc_insertion_point(field_get:PmtdMsg.PmtdCommonMsg.body)
  return body_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PmtdCommonMsg::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PmtdMsg.PmtdCommonMsg.body)
}
 void PmtdCommonMsg::set_body(const char* value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PmtdMsg.PmtdCommonMsg.body)
}
 void PmtdCommonMsg::set_body(const void* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PmtdMsg.PmtdCommonMsg.body)
}
 ::std::string* PmtdCommonMsg::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:PmtdMsg.PmtdCommonMsg.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PmtdCommonMsg::release_body() {
  // @@protoc_insertion_point(field_release:PmtdMsg.PmtdCommonMsg.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PmtdCommonMsg::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:PmtdMsg.PmtdCommonMsg.body)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceStatusMsg::kDeviceTypeFieldNumber;
const int DeviceStatusMsg::kDeviceStatusFieldNumber;
const int DeviceStatusMsg::kDeviceErrorCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceStatusMsg::DeviceStatusMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PmtdMsg.DeviceStatusMsg)
}

void DeviceStatusMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DeviceStatusMsg::DeviceStatusMsg(const DeviceStatusMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PmtdMsg.DeviceStatusMsg)
}

void DeviceStatusMsg::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  device_type_ = 0;
  device_status_ = 0;
  device_error_code_ = 0;
}

DeviceStatusMsg::~DeviceStatusMsg() {
  // @@protoc_insertion_point(destructor:PmtdMsg.DeviceStatusMsg)
  SharedDtor();
}

void DeviceStatusMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeviceStatusMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceStatusMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceStatusMsg_descriptor_;
}

const DeviceStatusMsg& DeviceStatusMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_5fpmtd_5fmsgs_2fpmtd_5fcommon_5fmsgs_2eproto();
  return *default_instance_;
}

DeviceStatusMsg* DeviceStatusMsg::default_instance_ = NULL;

DeviceStatusMsg* DeviceStatusMsg::New(::google::protobuf::Arena* arena) const {
  DeviceStatusMsg* n = new DeviceStatusMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceStatusMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:PmtdMsg.DeviceStatusMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DeviceStatusMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DeviceStatusMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(device_type_, device_error_code_);

#undef ZR_HELPER_
#undef ZR_

}

bool DeviceStatusMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PmtdMsg.DeviceStatusMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PmtdMsg.PmtdDeviceTypeE device_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_device_type(static_cast< ::PmtdMsg::PmtdDeviceTypeE >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_device_status;
        break;
      }

      // optional .PmtdMsg.PmtdStatusTypeE device_status = 2;
      case 2: {
        if (tag == 16) {
         parse_device_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_device_status(static_cast< ::PmtdMsg::PmtdStatusTypeE >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_device_error_code;
        break;
      }

      // optional int32 device_error_code = 3;
      case 3: {
        if (tag == 24) {
         parse_device_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &device_error_code_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PmtdMsg.DeviceStatusMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PmtdMsg.DeviceStatusMsg)
  return false;
#undef DO_
}

void DeviceStatusMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PmtdMsg.DeviceStatusMsg)
  // optional .PmtdMsg.PmtdDeviceTypeE device_type = 1;
  if (this->device_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->device_type(), output);
  }

  // optional .PmtdMsg.PmtdStatusTypeE device_status = 2;
  if (this->device_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->device_status(), output);
  }

  // optional int32 device_error_code = 3;
  if (this->device_error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->device_error_code(), output);
  }

  // @@protoc_insertion_point(serialize_end:PmtdMsg.DeviceStatusMsg)
}

::google::protobuf::uint8* DeviceStatusMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PmtdMsg.DeviceStatusMsg)
  // optional .PmtdMsg.PmtdDeviceTypeE device_type = 1;
  if (this->device_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->device_type(), target);
  }

  // optional .PmtdMsg.PmtdStatusTypeE device_status = 2;
  if (this->device_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->device_status(), target);
  }

  // optional int32 device_error_code = 3;
  if (this->device_error_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->device_error_code(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PmtdMsg.DeviceStatusMsg)
  return target;
}

int DeviceStatusMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:PmtdMsg.DeviceStatusMsg)
  int total_size = 0;

  // optional .PmtdMsg.PmtdDeviceTypeE device_type = 1;
  if (this->device_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->device_type());
  }

  // optional .PmtdMsg.PmtdStatusTypeE device_status = 2;
  if (this->device_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->device_status());
  }

  // optional int32 device_error_code = 3;
  if (this->device_error_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->device_error_code());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceStatusMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PmtdMsg.DeviceStatusMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DeviceStatusMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceStatusMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PmtdMsg.DeviceStatusMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PmtdMsg.DeviceStatusMsg)
    MergeFrom(*source);
  }
}

void DeviceStatusMsg::MergeFrom(const DeviceStatusMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PmtdMsg.DeviceStatusMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.device_type() != 0) {
    set_device_type(from.device_type());
  }
  if (from.device_status() != 0) {
    set_device_status(from.device_status());
  }
  if (from.device_error_code() != 0) {
    set_device_error_code(from.device_error_code());
  }
}

void DeviceStatusMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PmtdMsg.DeviceStatusMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceStatusMsg::CopyFrom(const DeviceStatusMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PmtdMsg.DeviceStatusMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceStatusMsg::IsInitialized() const {

  return true;
}

void DeviceStatusMsg::Swap(DeviceStatusMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceStatusMsg::InternalSwap(DeviceStatusMsg* other) {
  std::swap(device_type_, other->device_type_);
  std::swap(device_status_, other->device_status_);
  std::swap(device_error_code_, other->device_error_code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeviceStatusMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceStatusMsg_descriptor_;
  metadata.reflection = DeviceStatusMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceStatusMsg

// optional .PmtdMsg.PmtdDeviceTypeE device_type = 1;
void DeviceStatusMsg::clear_device_type() {
  device_type_ = 0;
}
 ::PmtdMsg::PmtdDeviceTypeE DeviceStatusMsg::device_type() const {
  // @@protoc_insertion_point(field_get:PmtdMsg.DeviceStatusMsg.device_type)
  return static_cast< ::PmtdMsg::PmtdDeviceTypeE >(device_type_);
}
 void DeviceStatusMsg::set_device_type(::PmtdMsg::PmtdDeviceTypeE value) {
  
  device_type_ = value;
  // @@protoc_insertion_point(field_set:PmtdMsg.DeviceStatusMsg.device_type)
}

// optional .PmtdMsg.PmtdStatusTypeE device_status = 2;
void DeviceStatusMsg::clear_device_status() {
  device_status_ = 0;
}
 ::PmtdMsg::PmtdStatusTypeE DeviceStatusMsg::device_status() const {
  // @@protoc_insertion_point(field_get:PmtdMsg.DeviceStatusMsg.device_status)
  return static_cast< ::PmtdMsg::PmtdStatusTypeE >(device_status_);
}
 void DeviceStatusMsg::set_device_status(::PmtdMsg::PmtdStatusTypeE value) {
  
  device_status_ = value;
  // @@protoc_insertion_point(field_set:PmtdMsg.DeviceStatusMsg.device_status)
}

// optional int32 device_error_code = 3;
void DeviceStatusMsg::clear_device_error_code() {
  device_error_code_ = 0;
}
 ::google::protobuf::int32 DeviceStatusMsg::device_error_code() const {
  // @@protoc_insertion_point(field_get:PmtdMsg.DeviceStatusMsg.device_error_code)
  return device_error_code_;
}
 void DeviceStatusMsg::set_device_error_code(::google::protobuf::int32 value) {
  
  device_error_code_ = value;
  // @@protoc_insertion_point(field_set:PmtdMsg.DeviceStatusMsg.device_error_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PmtdDeviceStatusMsgs::kHeaderFieldNumber;
const int PmtdDeviceStatusMsgs::kStatusMsgsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PmtdDeviceStatusMsgs::PmtdDeviceStatusMsgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PmtdMsg.PmtdDeviceStatusMsgs)
}

void PmtdDeviceStatusMsgs::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  header_ = const_cast< ::PmtdMsg::Header*>(&::PmtdMsg::Header::default_instance());
}

PmtdDeviceStatusMsgs::PmtdDeviceStatusMsgs(const PmtdDeviceStatusMsgs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PmtdMsg.PmtdDeviceStatusMsgs)
}

void PmtdDeviceStatusMsgs::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  header_ = NULL;
}

PmtdDeviceStatusMsgs::~PmtdDeviceStatusMsgs() {
  // @@protoc_insertion_point(destructor:PmtdMsg.PmtdDeviceStatusMsgs)
  SharedDtor();
}

void PmtdDeviceStatusMsgs::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void PmtdDeviceStatusMsgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PmtdDeviceStatusMsgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PmtdDeviceStatusMsgs_descriptor_;
}

const PmtdDeviceStatusMsgs& PmtdDeviceStatusMsgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobuf_5fpmtd_5fmsgs_2fpmtd_5fcommon_5fmsgs_2eproto();
  return *default_instance_;
}

PmtdDeviceStatusMsgs* PmtdDeviceStatusMsgs::default_instance_ = NULL;

PmtdDeviceStatusMsgs* PmtdDeviceStatusMsgs::New(::google::protobuf::Arena* arena) const {
  PmtdDeviceStatusMsgs* n = new PmtdDeviceStatusMsgs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PmtdDeviceStatusMsgs::Clear() {
// @@protoc_insertion_point(message_clear_start:PmtdMsg.PmtdDeviceStatusMsgs)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  status_msgs_.Clear();
}

bool PmtdDeviceStatusMsgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PmtdMsg.PmtdDeviceStatusMsgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PmtdMsg.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_status_msgs;
        break;
      }

      // repeated .PmtdMsg.DeviceStatusMsg status_msgs = 2;
      case 2: {
        if (tag == 18) {
         parse_status_msgs:
          DO_(input->IncrementRecursionDepth());
         parse_loop_status_msgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_status_msgs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_status_msgs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PmtdMsg.PmtdDeviceStatusMsgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PmtdMsg.PmtdDeviceStatusMsgs)
  return false;
#undef DO_
}

void PmtdDeviceStatusMsgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PmtdMsg.PmtdDeviceStatusMsgs)
  // optional .PmtdMsg.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .PmtdMsg.DeviceStatusMsg status_msgs = 2;
  for (unsigned int i = 0, n = this->status_msgs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->status_msgs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:PmtdMsg.PmtdDeviceStatusMsgs)
}

::google::protobuf::uint8* PmtdDeviceStatusMsgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PmtdMsg.PmtdDeviceStatusMsgs)
  // optional .PmtdMsg.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated .PmtdMsg.DeviceStatusMsg status_msgs = 2;
  for (unsigned int i = 0, n = this->status_msgs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->status_msgs(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PmtdMsg.PmtdDeviceStatusMsgs)
  return target;
}

int PmtdDeviceStatusMsgs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:PmtdMsg.PmtdDeviceStatusMsgs)
  int total_size = 0;

  // optional .PmtdMsg.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // repeated .PmtdMsg.DeviceStatusMsg status_msgs = 2;
  total_size += 1 * this->status_msgs_size();
  for (int i = 0; i < this->status_msgs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->status_msgs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PmtdDeviceStatusMsgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PmtdMsg.PmtdDeviceStatusMsgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PmtdDeviceStatusMsgs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PmtdDeviceStatusMsgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PmtdMsg.PmtdDeviceStatusMsgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PmtdMsg.PmtdDeviceStatusMsgs)
    MergeFrom(*source);
  }
}

void PmtdDeviceStatusMsgs::MergeFrom(const PmtdDeviceStatusMsgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PmtdMsg.PmtdDeviceStatusMsgs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  status_msgs_.MergeFrom(from.status_msgs_);
  if (from.has_header()) {
    mutable_header()->::PmtdMsg::Header::MergeFrom(from.header());
  }
}

void PmtdDeviceStatusMsgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PmtdMsg.PmtdDeviceStatusMsgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PmtdDeviceStatusMsgs::CopyFrom(const PmtdDeviceStatusMsgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PmtdMsg.PmtdDeviceStatusMsgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PmtdDeviceStatusMsgs::IsInitialized() const {

  return true;
}

void PmtdDeviceStatusMsgs::Swap(PmtdDeviceStatusMsgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PmtdDeviceStatusMsgs::InternalSwap(PmtdDeviceStatusMsgs* other) {
  std::swap(header_, other->header_);
  status_msgs_.UnsafeArenaSwap(&other->status_msgs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PmtdDeviceStatusMsgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PmtdDeviceStatusMsgs_descriptor_;
  metadata.reflection = PmtdDeviceStatusMsgs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PmtdDeviceStatusMsgs

// optional .PmtdMsg.Header header = 1;
bool PmtdDeviceStatusMsgs::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
void PmtdDeviceStatusMsgs::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::PmtdMsg::Header& PmtdDeviceStatusMsgs::header() const {
  // @@protoc_insertion_point(field_get:PmtdMsg.PmtdDeviceStatusMsgs.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::PmtdMsg::Header* PmtdDeviceStatusMsgs::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::PmtdMsg::Header;
  }
  // @@protoc_insertion_point(field_mutable:PmtdMsg.PmtdDeviceStatusMsgs.header)
  return header_;
}
::PmtdMsg::Header* PmtdDeviceStatusMsgs::release_header() {
  // @@protoc_insertion_point(field_release:PmtdMsg.PmtdDeviceStatusMsgs.header)
  
  ::PmtdMsg::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void PmtdDeviceStatusMsgs::set_allocated_header(::PmtdMsg::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:PmtdMsg.PmtdDeviceStatusMsgs.header)
}

// repeated .PmtdMsg.DeviceStatusMsg status_msgs = 2;
int PmtdDeviceStatusMsgs::status_msgs_size() const {
  return status_msgs_.size();
}
void PmtdDeviceStatusMsgs::clear_status_msgs() {
  status_msgs_.Clear();
}
const ::PmtdMsg::DeviceStatusMsg& PmtdDeviceStatusMsgs::status_msgs(int index) const {
  // @@protoc_insertion_point(field_get:PmtdMsg.PmtdDeviceStatusMsgs.status_msgs)
  return status_msgs_.Get(index);
}
::PmtdMsg::DeviceStatusMsg* PmtdDeviceStatusMsgs::mutable_status_msgs(int index) {
  // @@protoc_insertion_point(field_mutable:PmtdMsg.PmtdDeviceStatusMsgs.status_msgs)
  return status_msgs_.Mutable(index);
}
::PmtdMsg::DeviceStatusMsg* PmtdDeviceStatusMsgs::add_status_msgs() {
  // @@protoc_insertion_point(field_add:PmtdMsg.PmtdDeviceStatusMsgs.status_msgs)
  return status_msgs_.Add();
}
::google::protobuf::RepeatedPtrField< ::PmtdMsg::DeviceStatusMsg >*
PmtdDeviceStatusMsgs::mutable_status_msgs() {
  // @@protoc_insertion_point(field_mutable_list:PmtdMsg.PmtdDeviceStatusMsgs.status_msgs)
  return &status_msgs_;
}
const ::google::protobuf::RepeatedPtrField< ::PmtdMsg::DeviceStatusMsg >&
PmtdDeviceStatusMsgs::status_msgs() const {
  // @@protoc_insertion_point(field_list:PmtdMsg.PmtdDeviceStatusMsgs.status_msgs)
  return status_msgs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace PmtdMsg

// @@protoc_insertion_point(global_scope)
